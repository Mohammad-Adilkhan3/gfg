def longSubarrWthSumDivByK(arr, n, k):
    # Create a prefix sum array
    prefix_sum = [0] * n
    prefix_sum[0] = arr[0] % k

    for i in range(1, n):
        prefix_sum[i] = (prefix_sum[i - 1] + arr[i]) % k

    # Create a dictionary to store the first occurrence of a remainder
    remainder_dict = {0: -1}
    max_length = 0

    for i in range(n):
        current_remainder = prefix_sum[i]

        if current_remainder in remainder_dict:
            max_length = max(max_length, i - remainder_dict[current_remainder])
        else:
            remainder_dict[current_remainder] = i

    return max_length

# Example usage:
arr1 = [2, 7, 6, 1, 4, 5]
n1 = 6
k1 = 3
output1 = longSubarrWthSumDivByK(arr1, n1, k1)
print("Output 1:", output1)

arr2 = [-2, 2, -5, 12, -11, -1, 7]
n2 = 7
k2 = 3
output2 = longSubarrWthSumDivByK(arr2, n2, k2)
print("Output 2:", output2)
