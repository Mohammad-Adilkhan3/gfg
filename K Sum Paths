Given a binary tree and an integer K. Find the number of paths in the tree which have their sum equal to K.
A path may start from any node and end at any node in the downward direction.
Since the answer may be very large, compute it modulo 109+7.

Example 1:

Input:      
Tree = 
          1                               
        /   \                          
       2     3
K = 3
Output: 
2
Explanation:
Path 1 : 1 + 2 = 3
Path 2 : only leaf node 3
Example 2:

Input: 
Tree = 
           1
        /     \
      3        -1
    /   \     /   \
   2     1   4     5                        
        /   / \     \                    
       1   1   2     6    
K = 5                    
Output: 
8
Explanation:
The following paths sum to K.  
3 2 
3 1 1 
1 3 1 
4 1 
1 -1 4 1 
-1 4 2 
5 
1 -1 5 
Your Task:  
You don't need to read input or print anything. Complete the function sumK() which takes root node and integer K as input parameters and returns the number of paths that have sum K. 

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(Height of Tree)

Constraints:
1 ≤ N ≤ 2*104
-105 ≤ Node Value ≤ 105
-109 ≤ K ≤ 109

code:
class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def sumK(root, K):
    def dfs(node, prefix_sum, prefix_sum_count, target, current_sum):
        nonlocal count
        if not node:
            return

        current_sum += node.value
        # Check if there is a prefix sum equal to current_sum - target
        count += prefix_sum_count.get(current_sum - target, 0)

        # Update the prefix sum count
        prefix_sum_count[current_sum] = prefix_sum_count.get(current_sum, 0) + 1

        # Recursively explore left and right subtrees
        dfs(node.left, prefix_sum, prefix_sum_count, target, current_sum)
        dfs(node.right, prefix_sum, prefix_sum_count, target, current_sum)

        # Backtrack by decrementing the prefix sum count
        prefix_sum_count[current_sum] -= 1

    count = 0
    prefix_sum_count = {0: 1}  # Initialize with 0 to handle paths starting from the root
    dfs(root, 0, prefix_sum_count, K, 0)
    
    return count % (10**9 + 7)

# Example usage:
# Constructing the binary tree
root1 = TreeNode(1)
root1.left = TreeNode(2)
root1.right = TreeNode(3)

# Finding the number of paths with sum equal to K
result1 = sumK(root1, 3)
print(result1)  # Output: 2

root2 = TreeNode(1)
root2.left = TreeNode(3)
root2.right = TreeNode(-1)
root2.left.left = TreeNode(2)
root2.left.right = TreeNode(1)
root2.right.left = TreeNode(4)
root2.right.right = TreeNode(5)
root2.left.right.left = TreeNode(1)
root2.right.left.left = TreeNode(1)
root2.right.left.right = TreeNode(2)
root2.right.right.right = TreeNode(6)

# Finding the number of paths with sum equal to K
result2 = sumK(root2, 5)
print(result2)  # Output: 8
